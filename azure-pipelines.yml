trigger:
- main

pool:
<<<<<<< HEAD
  vmImage: 'ubuntu-latest'

jobs:
- job:
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
    displayName: 'Install Node.js'

  - script: |
      npm install
    displayName: 'npm install and build' 

  - task: Docker@2
    inputs:
      containerRegistry: 'docker'
      repository: 'thsre/app_repo'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      

  - task: ECRPullImage@1
    inputs:
      awsCredentials: 'aws'
      regionName: 'us-east-1'
      repository: 'app_repo'
      imageSource: 'imagetag'

  - task: ECRPushImage@1
    inputs:
      awsCredentials: 'aws'
      regionName: 'us-east-1'
      imageSource: 'imageid'
      sourceImageId: '242451166731.dkr.ecr.us-east-1.amazonaws.com/app_repo:latest'
      repositoryName: 'app_repo'
      forceDockerNamingConventions: true

  - task: SonarQubePrepare@5
    inputs:
      SonarQube: 'deploy-aws-ecs'
      scannerMode: 'CLI'
      configMode: 'file'
      extraProperties: 'sonar.projectKey=node-app'

  - task: SonarQubeAnalyze@5
    inputs:
      jdkVersion: 'JAVA_HOME_11_X64'

  - task: dependency-check-build-task@6
    inputs:
      projectName: 'deploy-aws-ecs'
      scanPath: '.'
      format: 'HTML'
      uploadReports: true
=======
  ame: Self-Hosted-Agent

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install
    npm run build
  displayName: 'npm install and build'

- task: Docker@2
  inputs:
    containerRegistry: 'aws_connection'
    repository: 'myapp'
    command: 'build'
    Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
  displayName: 'Build Docker Image'

- task: Docker@2
  inputs:
    containerRegistry: 'ACRConnection' # Substitua pelo nome da sua conexão de registro de contêiner do Azure
    repository: 'myapp'
    command: 'push'
    Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
  displayName: 'Push Docker Image'

- task: AmazonECSTask@1
  inputs:
    awsCredentials: 'AWSConnection' # Substitua pelo nome da sua conexão do AWS
    regionName: 'us-west-2' # Substitua pela sua região AWS
    taskDefinition: 'myapp-task-definition'
    containerDefinitions: |
      [{
        "name": "myapp-container",
        "image": "123456789.dkr.ecr.us-west-2.amazonaws.com/myapp:latest",
        "essential": true,
        "portMappings": [{
          "containerPort": 3000,
          "hostPort": 3000
        }]
      }]
    familyName: 'myapp-family'
    serviceName: 'myapp-service'
    clusterName: 'my-ecs-cluster'
  displayName: 'Deploy to ECS'
>>>>>>> bac5ea10209bcf76eff257961f8ba20d0d0d9762
